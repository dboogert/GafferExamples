import Gaffer
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 53, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["Sphere"] = GafferScene.Sphere( "Sphere" )
parent.addChild( __children["Sphere"] )
__children["Sphere"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Noise"] = GafferOSL.OSLShader( "Noise" )
parent.addChild( __children["Noise"] )
__children["Noise"].loadShader( "Pattern/Noise" )
__children["Noise"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FloatToColor"] = GafferOSL.OSLShader( "FloatToColor" )
parent.addChild( __children["FloatToColor"] )
__children["FloatToColor"].loadShader( "Conversion/FloatToColor" )
__children["FloatToColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutColor"] = GafferOSL.OSLShader( "OutColor" )
parent.addChild( __children["OutColor"] )
__children["OutColor"].loadShader( "ObjectProcessing/OutColor" )
__children["OutColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"] = GafferOSL.OSLShader( "OutObject" )
parent.addChild( __children["OutObject"] )
__children["OutObject"].loadShader( "ObjectProcessing/OutObject" )
__children["OutObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "a", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["out"].addChild( Gaffer.V3fPlug( "outP", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutPoint"] = GafferOSL.OSLShader( "OutPoint" )
parent.addChild( __children["OutPoint"] )
__children["OutPoint"].loadShader( "ObjectProcessing/OutPoint" )
__children["OutPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"].addChild( GafferScene.ScenePlug( "__out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].addChild( Gaffer.FloatPlug( "__in", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"].addChild( Gaffer.FloatPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["noiseScale"] = Gaffer.FloatPlug( "noiseScale", defaultValue = -0.1599999964237213, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["noiseScale"] )
__children["sphereDivisions"] = Gaffer.IntPlug( "sphereDivisions", defaultValue = 512, minValue = 3, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["sphereDivisions"] )
__children["MultiplyFloat"] = GafferOSL.OSLShader( "MultiplyFloat" )
parent.addChild( __children["MultiplyFloat"] )
__children["MultiplyFloat"].loadShader( "Maths/MultiplyFloat" )
__children["MultiplyFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn1"] = Gaffer.BoxIn( "BoxIn1" )
parent.addChild( __children["BoxIn1"] )
__children["BoxIn1"].addChild( Gaffer.FloatPlug( "__in", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn1"].addChild( Gaffer.FloatPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["noiseAmplitude"] = Gaffer.FloatPlug( "noiseAmplitude", defaultValue = 0.6000000238418579, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["noiseAmplitude"] )
__children["OSLObject1"] = GafferOSL.OSLObject( "OSLObject1" )
parent.addChild( __children["OSLObject1"] )
__children["OSLObject1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject1"] = GafferOSL.OSLShader( "OutObject1" )
parent.addChild( __children["OutObject1"] )
__children["OutObject1"].loadShader( "ObjectProcessing/OutObject" )
__children["OutObject1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MeshType"] = GafferScene.MeshType( "MeshType" )
parent.addChild( __children["MeshType"] )
__children["MeshType"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["radius"] = Gaffer.FloatPlug( "radius", defaultValue = 0.5, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["radius"] )
__children["Sphere"]["radius"].setInput( __children["radius"] )
__children["Sphere"]["divisions"]["x"].setInput( __children["sphereDivisions"] )
__children["Sphere"]["divisions"]["y"].setInput( __children["Sphere"]["divisions"]["x"] )
__children["Sphere"]["__uiPosition"].setValue( imath.V2f( 2.0806303, 8.12073898 ) )
__children["OSLObject"]["in"].setInput( __children["Sphere"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject"]["shader"].setInput( __children["OutObject"]["out"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( 5.21215153, -6.3499999 ) )
__children["Noise"]["parameters"]["scale"].setInput( __children["BoxIn"]["out"] )
__children["Noise"]["__uiPosition"].setValue( imath.V2f( -57.2423935, 9.85761166 ) )
__children["FloatToColor"]["parameters"]["r"].setInput( __children["MultiplyFloat"]["out"]["out"] )
__children["FloatToColor"]["parameters"]["g"].setInput( __children["MultiplyFloat"]["out"]["out"] )
__children["FloatToColor"]["parameters"]["b"].setInput( __children["MultiplyFloat"]["out"]["out"] )
__children["FloatToColor"]["__uiPosition"].setValue( imath.V2f( -29.3684731, 3.06529999 ) )
__children["OutColor"]["parameters"]["value"].setInput( __children["FloatToColor"]["out"]["c"] )
__children["OutColor"]["parameters"]["value"]["r"].setInput( __children["FloatToColor"]["out"]["c"]["r"] )
__children["OutColor"]["parameters"]["value"]["g"].setInput( __children["FloatToColor"]["out"]["c"]["g"] )
__children["OutColor"]["parameters"]["value"]["b"].setInput( __children["FloatToColor"]["out"]["c"]["b"] )
__children["OutColor"]["__uiPosition"].setValue( imath.V2f( -16.4273109, 0.0416187942 ) )
__children["OutObject"]["parameters"]["in0"].setInput( __children["OutColor"]["out"]["primitiveVariable"] )
__children["OutObject"]["__uiPosition"].setValue( imath.V2f( -6.10034847, -6.35000038 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/sphere' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 36.7916603, -0.661275625 ) )
__children["OSLCode"]["parameters"]["a"].setInput( __children["MultiplyFloat"]["out"]["out"] )
__children["OSLCode"]["code"].setValue( 'outP = P + N * a;' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( -38.4796219, -17.2351322 ) )
__children["OutPoint"]["parameters"]["value"].setInput( __children["OSLCode"]["out"]["outP"] )
__children["OutPoint"]["parameters"]["value"]["x"].setInput( __children["OSLCode"]["out"]["outP"]["x"] )
__children["OutPoint"]["parameters"]["value"]["y"].setInput( __children["OSLCode"]["out"]["outP"]["y"] )
__children["OutPoint"]["parameters"]["value"]["z"].setInput( __children["OSLCode"]["out"]["outP"]["z"] )
__children["OutPoint"]["__uiPosition"].setValue( imath.V2f( -28.5575027, -15.3140621 ) )
__children["BoxOut"]["in"].setInput( __children["MeshType"]["out"] )
__children["BoxOut"]["__out"].setInput( __children["BoxOut"]["in"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 5.23382282, -34.2444267 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["BoxIn"]["name"].setValue( 'noiseScale' )
__children["BoxIn"]["__in"].setInput( __children["noiseScale"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:visible', True )
__children["BoxIn"]["out"].setInput( __children["BoxIn"]["__in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["out"], 'noduleLayout:section', 'right' )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( -71.5727844, 11.0569038 ) )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'description', '' )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'label', None )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["noiseScale"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["sphereDivisions"], 'nodule:type', '' )
__children["MultiplyFloat"]["parameters"]["a"].setInput( __children["Noise"]["out"]["n"] )
__children["MultiplyFloat"]["parameters"]["b"].setInput( __children["BoxIn1"]["out"] )
__children["MultiplyFloat"]["__uiPosition"].setValue( imath.V2f( -43.5100746, 9.85761166 ) )
__children["BoxIn1"]["name"].setValue( 'noiseAmplitude' )
__children["BoxIn1"]["__in"].setInput( __children["noiseAmplitude"] )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'noduleLayout:visible', True )
__children["BoxIn1"]["out"].setInput( __children["BoxIn1"]["__in"] )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["out"], 'noduleLayout:section', 'right' )
__children["BoxIn1"]["__uiPosition"].setValue( imath.V2f( -58.924202, 2.00761127 ) )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'description', '' )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'label', None )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["noiseAmplitude"], 'noduleLayout:visible', True )
__children["OSLObject1"]["in"].setInput( __children["OSLObject"]["out"] )
__children["OSLObject1"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject1"]["shader"].setInput( __children["OutObject1"]["out"] )
__children["OSLObject1"]["__uiPosition"].setValue( imath.V2f( 5.23382282, -16.5075912 ) )
__children["OutObject1"]["parameters"]["in0"].setInput( __children["OutPoint"]["out"]["primitiveVariable"] )
__children["OutObject1"]["__uiPosition"].setValue( imath.V2f( -19.4175873, -31.1789169 ) )
__children["MeshType"]["in"].setInput( __children["OSLObject1"]["out"] )
__children["MeshType"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["MeshType"]["meshType"].setValue( 'linear' )
__children["MeshType"]["calculatePolygonNormals"].setValue( True )
__children["MeshType"]["overwriteExistingNormals"].setValue( True )
__children["MeshType"]["__uiPosition"].setValue( imath.V2f( 5.29909229, -26.8982086 ) )
Gaffer.Metadata.registerValue( __children["radius"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["radius"], 'description', 'Radius of the sphere.' )


del __children

